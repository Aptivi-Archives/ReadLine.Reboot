{
  "api/ReadLineReboot.Abstractions.BellType.html": {
    "href": "api/ReadLineReboot.Abstractions.BellType.html",
    "title": "Enum BellType | ReadLine.Reboot API - Eofla Internals",
    "keywords": "Enum BellType Specifies the bell type Namespace : ReadLineReboot.Abstractions Assembly : ReadLine.Reboot.dll Syntax public enum BellType : int Fields Name Description Audible Audible bell None No bell enabled Visible Visible bell. Your terminal should support the VT sequences with visible bell support."
  },
  "api/ReadLineReboot.Abstractions.html": {
    "href": "api/ReadLineReboot.Abstractions.html",
    "title": "Namespace ReadLineReboot.Abstractions | ReadLine.Reboot API - Eofla Internals",
    "keywords": "Namespace ReadLineReboot.Abstractions Interfaces IConsole Console interface Enums BellType Specifies the bell type"
  },
  "api/ReadLineReboot.Abstractions.IConsole.html": {
    "href": "api/ReadLineReboot.Abstractions.IConsole.html",
    "title": "Interface IConsole | ReadLine.Reboot API - Eofla Internals",
    "keywords": "Interface IConsole Console interface Namespace : ReadLineReboot.Abstractions Assembly : ReadLine.Reboot.dll Syntax public interface IConsole Properties | Improve this Doc View Source BufferWidth Buffer width Declaration int BufferWidth { get; } Property Value Type Description System.Int32 | Improve this Doc View Source CursorLeft Cursor left position Declaration int CursorLeft { get; } Property Value Type Description System.Int32 | Improve this Doc View Source CursorTop Cursor top position Declaration int CursorTop { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PasswordMaskChar Password mask character Declaration char PasswordMaskChar { get; } Property Value Type Description System.Char | Improve this Doc View Source PasswordMode Password mode Declaration bool PasswordMode { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source SetCursorPosition(Int32, Int32) Sets the cursor position Declaration void SetCursorPosition(int left, int top) Parameters Type Name Description System.Int32 left Left position System.Int32 top Top position | Improve this Doc View Source Write(String) Writes text to the console Declaration void Write(string value) Parameters Type Name Description System.String value Text to be printed"
  },
  "api/ReadLineReboot.html": {
    "href": "api/ReadLineReboot.html",
    "title": "Namespace ReadLineReboot | ReadLine.Reboot API - Eofla Internals",
    "keywords": "Namespace ReadLineReboot Classes KeyHandler The keyhandler class ReadLine The initial read line module Interfaces IAutoCompleteHandler The auto completion handler interface. You must make a base class that implements this interface in order to enable auto completion."
  },
  "api/ReadLineReboot.IAutoCompleteHandler.html": {
    "href": "api/ReadLineReboot.IAutoCompleteHandler.html",
    "title": "Interface IAutoCompleteHandler | ReadLine.Reboot API - Eofla Internals",
    "keywords": "Interface IAutoCompleteHandler The auto completion handler interface. You must make a base class that implements this interface in order to enable auto completion. Namespace : ReadLineReboot Assembly : ReadLine.Reboot.dll Syntax public interface IAutoCompleteHandler Properties | Improve this Doc View Source Separators Separator characters. If any of these are encountered, the auto-completion will trigger Declaration char[] Separators { get; set; } Property Value Type Description System.Char [] Methods | Improve this Doc View Source GetSuggestions(String, Int32) Gets the suggestions based on current text and current index Declaration string[] GetSuggestions(string text, int index) Parameters Type Name Description System.String text The current text entered in the console System.Int32 index The index of the terminal cursor where the auto-completion is triggered Returns Type Description System.String []"
  },
  "api/ReadLineReboot.KeyHandler.html": {
    "href": "api/ReadLineReboot.KeyHandler.html",
    "title": "Class KeyHandler | ReadLine.Reboot API - Eofla Internals",
    "keywords": "Class KeyHandler The keyhandler class Inheritance System.Object KeyHandler Namespace : ReadLineReboot Assembly : ReadLine.Reboot.dll Syntax public class KeyHandler : object Constructors | Improve this Doc View Source KeyHandler(IConsole, List<String>, IAutoCompleteHandler) Initializes the new instance of the key handler class. Please note that you need to call ReadLineReboot.KeyBindings.InitializeBindings directly after this. Declaration public KeyHandler(IConsole console, List<string> history, IAutoCompleteHandler autoCompleteHandler) Parameters Type Name Description IConsole console Console instance List < System.String > history History of written inputs IAutoCompleteHandler autoCompleteHandler Auto completion handler Properties | Improve this Doc View Source CurrentLine The current line Declaration public string CurrentLine { get; } Property Value Type Description System.String | Improve this Doc View Source KillBuffer The current console clipboard content for use with CTRL + Y (Yank) Declaration public string KillBuffer { get; } Property Value Type Description System.String | Improve this Doc View Source Text The current text Declaration public string Text { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddLastArgument() Adds last argument to the current input Declaration public void AddLastArgument() | Improve this Doc View Source Backspace() Erases the last letter. Simulates the backspace key. Declaration public void Backspace() | Improve this Doc View Source Backspace(Int32) Erases the last letter. Simulates the backspace key. Declaration public void Backspace(int count) Parameters Type Name Description System.Int32 count | Improve this Doc View Source BackspaceOrDelete() Backspace or delete Declaration public void BackspaceOrDelete() | Improve this Doc View Source ClearHorizontalSpace() Clears all horizontal space Declaration public void ClearHorizontalSpace() | Improve this Doc View Source ClearLine() Clears the entire line Declaration public void ClearLine() | Improve this Doc View Source ClearLineAfterSpace() Clears all characters after the space is spotted Declaration public void ClearLineAfterSpace() | Improve this Doc View Source ClearLineToLeft() Clears the line to the left Declaration public void ClearLineToLeft() | Improve this Doc View Source ClearLineToLeft(Boolean) Clears the line to the left Declaration public void ClearLineToLeft(bool force) Parameters Type Name Description System.Boolean force | Improve this Doc View Source ClearLineToRight() Clears the line to the right Declaration public void ClearLineToRight() | Improve this Doc View Source ClearLineToRight(Boolean) Clears the line to the right Declaration public void ClearLineToRight(bool force) Parameters Type Name Description System.Boolean force | Improve this Doc View Source ClearLineUntilSpace() Clears all characters until the space is spotted Declaration public void ClearLineUntilSpace() | Improve this Doc View Source ClearLineUntilSpaceOrSlash() Clears all characters until the space or slash (or backslash if running on Windows) is spotted Declaration public void ClearLineUntilSpaceOrSlash() | Improve this Doc View Source ClearScreenAndRewrite() Clears the screen and rewrites the current line Declaration public void ClearScreenAndRewrite() | Improve this Doc View Source CopyBackwardWord() Copies the word before the cursor and stores it to the kill buffer Declaration public void CopyBackwardWord() | Improve this Doc View Source CopyForwardWord() Copies the word under the cursor and stores it to the kill buffer Declaration public void CopyForwardWord() | Improve this Doc View Source Delete() Deletes the letter in the current position Declaration public void Delete() | Improve this Doc View Source DeleteChar() Deletes the character in the current position. Invoked by Delete() and Backspace() Declaration public void DeleteChar() | Improve this Doc View Source DeleteChar(Int32) Deletes the character in the current position. Invoked by Delete() and Backspace() Declaration public void DeleteChar(int count) Parameters Type Name Description System.Int32 count | Improve this Doc View Source DoAutoComplete() Initialize auto-complete initially Declaration public void DoAutoComplete() | Improve this Doc View Source DoReverseAutoComplete() Does the reverse auto complete Declaration public void DoReverseAutoComplete() | Improve this Doc View Source FirstHistory() Gets the first history Declaration public void FirstHistory() | Improve this Doc View Source GoBackToCurrentLine() Goes back to the current line Declaration public void GoBackToCurrentLine() | Improve this Doc View Source Handle(ConsoleKeyInfo) Handles the pressed key Declaration public void Handle(ConsoleKeyInfo keyInfo) Parameters Type Name Description ConsoleKeyInfo keyInfo Key information | Improve this Doc View Source InsertComment() Inserts the comment to the current command Declaration public void InsertComment() | Improve this Doc View Source InsertCompletions() Inserts available completions Declaration public void InsertCompletions() | Improve this Doc View Source InsertHomeDirectory() Inserts the home directory by replacing the tilde Declaration public void InsertHomeDirectory() | Improve this Doc View Source ListPossibleCompletions() Lists possible completions Declaration public void ListPossibleCompletions() | Improve this Doc View Source LowercaseCharMoveToEndOfWord() Makes the character lowercase and move to the end of the word Declaration public void LowercaseCharMoveToEndOfWord() | Improve this Doc View Source LowercaseWord() Makes the word lowercase Declaration public void LowercaseWord() | Improve this Doc View Source MinusArgumentOrWrite() Add a minus to the argument number or write the minuses if an argument is already specified Declaration public void MinusArgumentOrWrite() | Improve this Doc View Source MoveCursorEnd() Moves the cursor to the end of the line Declaration public void MoveCursorEnd() | Improve this Doc View Source MoveCursorHome() Moves the cursor to the beginning of the line Declaration public void MoveCursorHome() | Improve this Doc View Source MoveCursorLeft() Moves the cursor to the left once Declaration public void MoveCursorLeft() | Improve this Doc View Source MoveCursorLeft(Int32) Moves the cursor to the left n times Declaration public void MoveCursorLeft(int count) Parameters Type Name Description System.Int32 count | Improve this Doc View Source MoveCursorRight() Moves the cursor to the right once Declaration public void MoveCursorRight() | Improve this Doc View Source MoveCursorRight(Int32) Moves the cursor to the right n times Declaration public void MoveCursorRight(int count) Parameters Type Name Description System.Int32 count | Improve this Doc View Source MoveCursorWordLeft() Moves the cursor to the left one word Declaration public void MoveCursorWordLeft() | Improve this Doc View Source MoveCursorWordRight() Moves the cursor to the right one word Declaration public void MoveCursorWordRight() | Improve this Doc View Source NextAutoComplete() Goes to the next suggestion, or to the first suggestion if we reached the last suggestion Declaration public void NextAutoComplete() | Improve this Doc View Source NextHistory() Shows the next history Declaration public void NextHistory() | Improve this Doc View Source PrevHistory() Shows the previous history Declaration public void PrevHistory() | Improve this Doc View Source PreviousAutoComplete() Goes to the previous suggestion, or to the last suggestion if we reached the first suggestion Declaration public void PreviousAutoComplete() | Improve this Doc View Source ResetAutoComplete() Resets the auto-completion Declaration public void ResetAutoComplete() | Improve this Doc View Source RewriteCurrentLine() Rewrites the current line Declaration public void RewriteCurrentLine() | Improve this Doc View Source SetArgument(Int32) Sets the argument Declaration public void SetArgument(int arg) Parameters Type Name Description System.Int32 arg Argument digit to add | Improve this Doc View Source StartAutoComplete() Starts the auto-completion, showing the first suggestion Declaration public void StartAutoComplete() | Improve this Doc View Source SuppressAction() No operation. Declaration public static void SuppressAction() | Improve this Doc View Source TransposeChars() Transposes the two characters in the current position Declaration public void TransposeChars() | Improve this Doc View Source TransposeWords() Transposes the two words in the current position Declaration public void TransposeWords() | Improve this Doc View Source Undo() Undos the last edit done to the current line Declaration public void Undo() | Improve this Doc View Source UndoAll() Undos all the edits done to the current line Declaration public void UndoAll() | Improve this Doc View Source UpdateCurrentLine() Updates the current line variable Declaration public void UpdateCurrentLine() | Improve this Doc View Source UpdatePrompt(String, Boolean) Updates the prompt Declaration public void UpdatePrompt(string newPrompt, bool rewriteCurrentLine = true) Parameters Type Name Description System.String newPrompt Prompt to be updated System.Boolean rewriteCurrentLine Whether to rewrite current line | Improve this Doc View Source UppercaseCharMoveToEndOfWord() Makes the character UPPERCASE and move to the end of the word Declaration public void UppercaseCharMoveToEndOfWord() | Improve this Doc View Source UppercaseWord() Makes the word UPPERCASE Declaration public void UppercaseWord() | Improve this Doc View Source WriteChar() Writes a single character to the console Declaration public void WriteChar() | Improve this Doc View Source WriteChar(Char, Int32) Writes a specific character to the console Declaration public void WriteChar(char c, int repeat = 1) Parameters Type Name Description System.Char c A character to be printed System.Int32 repeat How many times to repeat the character? | Improve this Doc View Source WriteNewString(String) Writes the string to the console, clearing the line beforehand Declaration public void WriteNewString(string str) Parameters Type Name Description System.String str The text to be printed | Improve this Doc View Source WriteString(String) Writes the string to the console without clearing the line Declaration public void WriteString(string str) Parameters Type Name Description System.String str The text to be printed | Improve this Doc View Source Yank() Pastes the content of console clipboard (kill buffer) Declaration public void Yank()"
  },
  "api/ReadLineReboot.ReadLine.html": {
    "href": "api/ReadLineReboot.ReadLine.html",
    "title": "Class ReadLine | ReadLine.Reboot API - Eofla Internals",
    "keywords": "Class ReadLine The initial read line module Inheritance System.Object ReadLine Namespace : ReadLineReboot Assembly : ReadLine.Reboot.dll Syntax public static class ReadLine : object Properties | Improve this Doc View Source AutoCompletionEnabled Whether the auto completion is enabled. Currently true. Declaration public static bool AutoCompletionEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AutoCompletionHandler The auto completion handler. You need to make a class that implements IAutoCompleteHandler Declaration public static IAutoCompleteHandler AutoCompletionHandler { set; } Property Value Type Description IAutoCompleteHandler | Improve this Doc View Source BellStyle The bell style. Declaration public static BellType BellStyle { get; set; } Property Value Type Description BellType | Improve this Doc View Source ClipboardEnabled Whether the clipboard (kill buffer) is enabled. Currently true. Declaration public static bool ClipboardEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CtrlCEnabled Whether the CTRL + C to EOL feature is enabled. Currently false. If false, exits program upon pressing CTRL + C. Declaration public static bool CtrlCEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source HistoryEnabled Whether the history is enabled. Currently false. Declaration public static bool HistoryEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source HistorySize Specifies the history size. If set to 0, all entries are removed and nothing will be added to the history. If set to a value less than 0, the history size is unlimited. Declaration public static int HistorySize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Interruptible Whether the input is interruptible. Currently false. Declaration public static bool Interruptible { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source InterruptionResponsiveness If Interruptible is enabled, sets how responsive the interruption listener while waiting for keypress. If zero, this means instant, but causes 100% CPU usage. If more than zero, this means that the listener will sleep for assigned number of seconds before detecting the next keys. Use this carefully, because it can cause missed keys depending on the application. Declaration public static int InterruptionResponsiveness { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source KeyHandler The key handler. Declaration public static KeyHandler KeyHandler { get; } Property Value Type Description KeyHandler | Improve this Doc View Source PrewriteDefaultValue Whether the default value should be pre-written or not. Currently false. Declaration public static bool PrewriteDefaultValue { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ReadRanToCompletion Whether the last Read(String, String, Boolean) or ReadPassword(String, Char, Boolean) request ran to completion. If the request is either cancelled or interrupted, this is false. Declaration public static bool ReadRanToCompletion { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UndoEnabled Whether the undo feature is enabled. Currently true. Declaration public static bool UndoEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source WritePrompt The prompt writing handler. Declaration public static Action<string> WritePrompt { set; } Property Value Type Description Action < System.String > Methods | Improve this Doc View Source AddCustomBinding(ConsoleKeyInfo, Action) Adds your own custom binding. If a custom binding already exists, updates the custom binding. Declaration public static void AddCustomBinding(ConsoleKeyInfo key, Action action) Parameters Type Name Description ConsoleKeyInfo key Console key to press Action action Action to be done when key is pressed | Improve this Doc View Source AddHistory(String[]) Adds a text or an array of texts to the history Declaration public static void AddHistory(params string[] texts) Parameters Type Name Description System.String [] texts The strings to add to the history | Improve this Doc View Source ChangeCustomBinding(ConsoleKeyInfo, Action) Changes your own custom binding Declaration public static void ChangeCustomBinding(ConsoleKeyInfo key, Action action) Parameters Type Name Description ConsoleKeyInfo key Console key to press Action action Action to be done when key is pressed | Improve this Doc View Source ClearHistory() Clears the history Declaration public static void ClearHistory() | Improve this Doc View Source GetHistory() Gets the current history Declaration public static List<string> GetHistory() Returns Type Description List < System.String > | Improve this Doc View Source InterruptRead() Interrupts reading from the console Declaration public static void InterruptRead() | Improve this Doc View Source Read(String, String, Boolean) Writes the prompt and reads the input Declaration public static string Read(string prompt = \"\", string defaultText = \"\", bool force = true) Parameters Type Name Description System.String prompt The prompt to write System.String defaultText The default text to write if nothing is written System.Boolean force Force read the input (may cause instability) Returns Type Description System.String The written text if anything is input from the user, or the default text if nothing if printed | Improve this Doc View Source ReadPassword(String, Char, Boolean) Writes the prompt and reads the input while masking the written input Declaration public static string ReadPassword(string prompt = \"\", char mask = null, bool force = true) Parameters Type Name Description System.String prompt The prompt to write System.Char mask Character to use to mask password System.Boolean force Force read the input (may cause instability) Returns Type Description System.String The written text | Improve this Doc View Source RemoveCustomBinding(ConsoleKeyInfo) Removes your own custom binding Declaration public static void RemoveCustomBinding(ConsoleKeyInfo key) Parameters Type Name Description ConsoleKeyInfo key Console key to press | Improve this Doc View Source SetHistory(List<String>) Sets the history Declaration public static void SetHistory(List<string> history) Parameters Type Name Description List < System.String > history"
  },
  "index.html": {
    "href": "index.html",
    "title": "What is ReadLine.Reboot? | ReadLine.Reboot API - Eofla Internals",
    "keywords": "What is ReadLine.Reboot? ReadLine.Reboot is a reboot of Toni Solarin-Sodara's original ReadLine that is discontinued. It's a GNU Readline like library built in pure C#. It can serve as a drop in replacement for the inbuilt Console.ReadLine() and brings along with it some of the terminal goodness you get from Unix shells, like command history navigation and tab auto completion. What is this web page? This webpage is an API documentation for mod developers to be used as reference. It constantly gets updated as we push the updates to the main and servicing versions of this project. If you still intend to use a documentation specific to your preferred version of ReadLine.Reboot, you may refer to the releases page of the project and download the attached <version>-doc.rar file. To get started using the documentation, select API Documentation from the top menu and select a namespace to get a clear overview of the API. Feedback If you wish to leave feedback to us about this API reference website, use the issue tracker of the project. If you wish to contribute to the documentation of the API, go to the project source code and make your improvements there on a draft Pull Request ; we don't support override files that are made by clicking on Improve this doc . Any meaningful contributions are welcome. Copyright (c) 2017 Toni Solarin-Sodara Copyright (c) 2022 Aptivi. All rights reserved."
  }
}